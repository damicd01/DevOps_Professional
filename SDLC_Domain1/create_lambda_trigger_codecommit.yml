Resources:
  LambdaS3Bucket:
    Type: AWS::S3::Bucket
    Properties: 
      BucketEncryption: 
        ServerSideEncryptionConfiguration: 
          - ServerSideEncryptionByDefault: 
              SSEAlgorithm: AES256
      BucketName: devopsprolambdacodecommittrigger
      PublicAccessBlockConfiguration: 
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration: 
        Status: Enabled
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: devopscert_lambda_s3_and_cwlogs
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSCodeCommitReadOnly
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
  IAMLambdaS3andCloudwatchLogs:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      ManagedPolicyName: LambdaS3andCWLogs
      Description: Policy for Lambda function
      Path: /
      PolicyDocument:
        {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": "logs:CreateLogGroup",
              "Resource": !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"
            },
            {
              "Effect": "Allow",
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents"
              ],
              "Resource": [
                !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*:*"
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "s3:Get*",
                "s3:List*"
              ],
              "Resource": "*"
            }
          ]
        }
      Roles:
        - !Ref LambdaExecutionRole
